"use strict";(self.webpackChunkvuepress_starter=self.webpackChunkvuepress_starter||[]).push([[152],{223:(n,s,a)=>{a.r(s),a.d(s,{data:()=>t});const t={key:"v-479b53cc",path:"/book/javascript/book01.html",title:"前端开发核心知识进阶",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"一网打尽this,对执行上下文说Yes",slug:"一网打尽this-对执行上下文说yes",children:[{level:3,title:"this 到底指向谁",slug:"this-到底指向谁",children:[]}]}],filePathRelative:"book/javascript/book01.md",git:{updatedTime:null,contributors:[]}}},205:(n,s,a)=>{a.r(s),a.d(s,{default:()=>e});const t=(0,a(252).uE)('<h1 id="前端开发核心知识进阶" tabindex="-1"><a class="header-anchor" href="#前端开发核心知识进阶" aria-hidden="true">#</a> 前端开发核心知识进阶</h1><h2 id="一网打尽this-对执行上下文说yes" tabindex="-1"><a class="header-anchor" href="#一网打尽this-对执行上下文说yes" aria-hidden="true">#</a> 一网打尽this,对执行上下文说Yes</h2><h3 id="this-到底指向谁" tabindex="-1"><a class="header-anchor" href="#this-到底指向谁" aria-hidden="true">#</a> this 到底指向谁</h3><ul><li>在函数体中,非显式或隐式地简单调用函数时,在严格模式下，函数内的this会被绑定到undefined上,在严格模式下则会被 绑定到全局对象上 window/global上。</li><li>一般使用new方法调用构造函数时,构造函数内的this会绑定到新创建的对象上。</li><li>一般通过call/apply/bind方法显式调用函数时,函数体内的this会被绑定到指定参数的对象上。</li><li>一般通过上下文对象调用函数时,函数体内的this会被绑定到该对象上。</li><li>在箭头函数中,this的指向是由外层(函数或全局)作用于来决定的。</li></ul><p>当然,真实环境多种多样</p><h4 id="_1-全局环境中的this" tabindex="-1"><a class="header-anchor" href="#_1-全局环境中的this" aria-hidden="true">#</a> 1.全局环境中的this</h4><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">function</span> <span class="token function">f2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token string">&#39;use strict&#39;</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n<span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment">//window</span>\n<span class="token function">f2</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment">//undefined</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>        这种情况相对简单、直接，函数在浏览器全局环境中被简单调用，在非严格模式下this指向window, 在通过user strict指明严格模式的情况下指向undefined</p><h4 id="_2-上下文对象调用中的this" tabindex="-1"><a class="header-anchor" href="#_2-上下文对象调用中的this" aria-hidden="true">#</a> 2.上下文对象调用中的this</h4><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> student <span class="token operator">=</span> <span class="token punctuation">{</span>\n    name<span class="token operator">:</span> <span class="token string">&#39;Lucas&#39;</span><span class="token punctuation">,</span>\n    <span class="token function-variable function">fn</span><span class="token operator">:</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token keyword">this</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>student<span class="token punctuation">.</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">===</span> student<span class="token punctuation">)</span>   <span class="token comment">//true</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div>',10),e={render:function(n,s){return t}}}}]);